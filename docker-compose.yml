version: '3.8'
services:
  db:
    image: mariadb
    container_name: ${APP_NAME}-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - '${FORWARD_DB_PORT:-3306}:3306'

  wp:
    build:
      context: ./docker/wp/
      args:
        - WORDPRESS_VERSION=${WORDPRESS_VERSION:-php8.1-fpm}
    container_name: ${APP_NAME}-wp
    expose:
      - '9003'
    environment:
      WORDPRESS_DB_HOST: ${DB_HOST:-db}
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_ROOT_PASSWORD}
      WORDPRESS_DB_NAME: ${DB_NAME}
      WORDPRESS_DEBUG: ${WORDPRESS_DEBUG}
      WORDPRESS_TABLE_PREFIX: ${DB_TABLE_PREFIX}
      WORDPRESS_CONFIG_EXTRA: |
        define( 'WP_HOME', '${PROTOCOL}://${DOMAIN}' );
        define( 'WP_SITEURL', '${PROTOCOL}://${DOMAIN}' );
        define( 'DISABLE_WP_CRON', true );
        define( 'WP_DEBUG_DISPLAY', true );
        define( 'WP_DEBUG_LOG', '/tmp/wordpress/wordpress.log' );
        define( 'FS_DIRECT', true );
        define( 'ALLOW_UNFILTERED_UPLOADS', true);
        define( 'WP_REDIS_HOST', '${APP_NAME}-cache' );
    volumes:
      - './build:/var/www/html'
      - './docker/wp/php.ini:/usr/local/etc/php/conf.d/overrides.ini'
      - './docker/wp/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini'
      - './logs:/tmp/xdebug'
      - './logs:/tmp/wordpress'
    depends_on:
      - db
      - redis

  chmod:
    image: wordpress:${WORDPRESS_VERSION:-php8.0-fpm}
    container_name: ${APP_NAME}-chmod
    restart: on-failure
    depends_on:
      - wp
      - composer
    volumes:
      - './build:/var/www/html'
    entrypoint: >
      /bin/sh -c "
      chmod -R 777 wp-content;
      chmod 664 composer.json;
      exit 0;
      "

  nginx:
    image: nginx:alpine
    container_name: ${APP_NAME}-nginx
    ports:
      - '${FORWARD_HTTP_PORT:-80}:80'
      - '${FORWARD_HTTPS_PORT:-443}:${FORWARD_HTTPS_PORT:-443}'
    volumes:
      - './docker/nginx/templates:/etc/nginx/templates'
      - './certs:/etc/certs'
      - './build:/var/www/html'
      - './logs:/var/log/nginx'
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .conf
      DOMAIN: ${DOMAIN}
      PROTOCOL: ${PROTOCOL}
      SSL_PORT: ${FORWARD_HTTPS_PORT}
      WORDPRESS_HOST: wp
      WORDPRESS_PROD_URL: ${WORDPRESS_PROD_URL:-wp}
      PROTOCOL_PROD_URL: ${PROTOCOL_PROD_URL:-http}
    depends_on:
      - wp
      - mkcert
      - chmod

  node:
    build:
      context: ./
      dockerfile: ./docker/node/Dockerfile
    container_name: ${APP_NAME}-node
    ports:
      - '${BROWSERSYNC_UI_PORT:-8081}:${BROWSERSYNC_UI_PORT:-8081}'
      - '${BROWSERSYNC_PROXY_PORT:-4443}:${BROWSERSYNC_PROXY_PORT:-4443}'
    environment:
      NODE_ENV: production
      PROXY_PORT: ${BROWSERSYNC_PROXY_PORT:-4443}
      UI_PORT: ${BROWSERSYNC_UI_PORT:-8081}
      NGINX_PORT: ${FORWARD_HTTPS_PORT:-8080}
      APP_NAME: ${APP_NAME}
      DOMAIN: ${DOMAIN}
      PROTOCOL: ${PROTOCOL}
    volumes:
      - './package.json:/usr/src/app/package.json'
      - './package-lock.json:/usr/src/app/package-lock.json'
      - './gulpfile.js:/usr/src/app/gulpfile.js'
      - './webpack.config.js:/usr/src/app/webpack.config.js'
      - './src:/usr/src/app/src'
      - './dist:/usr/src/app/dist'
      - './build:/usr/src/app/build'
      - './backups:/usr/src/app/backups'
      - './patternlab:/usr/src/app/patternlab'
      - './certs:/var/www/ssl'
      - './node_modules:/usr/src/app/node_modules'
    depends_on:
      - nginx
    command: npm run dev

  patternlab:
      extends:
          file: docker-compose.patternlab.yml
          service: patternlab

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: ${APP_NAME}-phpmyadmin
    volumes:
      - ./docker/phpmyadmin/phpmyadmin.ini:/usr/local/etc/php/conf.d/phpmyadmin.ini
    environment:
      PMA_HOST: ${DB_HOST:-db}
      PMA_PORT: ${FORWARD_DB_PORT:-3306}:3306
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - '${FORWARD_PHPMYADMIN_PORT:-8082}:80'
    links:
      - db:db

  mailhog:
    image: mailhog/mailhog
    container_name: ${APP_NAME}-mailhog
    ports:
      - '${FORWARD_MAILHOG_PORT:-1025}:1025'
      - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'

  composer:
    image: composer
    container_name: ${APP_NAME}-composer
    working_dir: /var/www/html
    restart: 'no'
    volumes:
      - './build:/var/www/html'
      - './composer.json:/var/www/html/composer.json'
      - '.env:/var/www/html/.env'
    environment:
        COMPOSER_AUTH: >
            {
              "http-basic": {
                "connect.advancedcustomfields.com": {
                  "username": "${WORDPRESS_PLUGIN_ACF_KEY}",
                  "password": "${PROTOCOL}://${DOMAIN}"
                }
              }
            }
    command: composer update --ignore-platform-reqs --no-scripts

  mkcert:
    build: ./docker/mkcert/
    volumes:
      - ./certs:/root/.local/share/mkcert
    command:
      - sh
      - -c
      - |
        mkcert -cert-file "${DOMAIN:-localhost}.crt" \
        -key-file "${DOMAIN:-localhost}.key" "${DOMAIN:-localhost}" "*.${DOMAIN:-localhost}" \
        && mkcert -install ${DOMAIN:-localhost}

  # Redis cache
  redis:
    image: redis:alpine
    container_name: ${APP_NAME}-cache

networks:
  default:
    name: ${APP_NAME}-network

volumes:
  db-data:
